import faiss
import numpy as np
import json
from database import get_db_connection

THRESHOLD = 0.4  # ปรับตามต้องการ

def find_most_similar_faces(embedding, event_sub_id=0):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    base_query = """
        SELECT fe.embedding, i.images_name, i.images_preview_name, fe.images_id
        FROM face_embeddings fe
        JOIN images i ON fe.images_id = i.images_id
    """
    params = []
    if event_sub_id:
        base_query += " WHERE i.events_sub_id = %s"
        params.append(event_sub_id)

    cursor.execute(base_query, params)
    results = cursor.fetchall()
    cursor.close()
    conn.close()

    if not results:
        return []

    # Load all embeddings and metadata
    embeddings_list = []
    metadata = []
    for row in results:
        try:
            db_embedding = json.loads(row["embedding"])
            embeddings_list.append(db_embedding)
            metadata.append({
                "images_name": row["images_name"],
                "images_id": row["images_id"],
                "images_preview_name": row["images_preview_name"]
            })
        except Exception as e:
            print(f"⚠️ Error loading embedding: {e}")

    if not embeddings_list:
        return []

    # Prepare FAISS
    db_embeddings_np = np.array(embeddings_list).astype("float32")
    query_embedding = np.array(embedding).astype("float32").reshape(1, -1)

    # Normalize for cosine similarity
    faiss.normalize_L2(db_embeddings_np)
    faiss.normalize_L2(query_embedding)

    index = faiss.IndexFlatIP(db_embeddings_np.shape[1])  # cosine similarity
    index.add(db_embeddings_np)

    k = 10  # return top 10 results
    D, I = index.search(query_embedding, k)

    results = []
    for score, idx in zip(D[0], I[0]):
        if score >= THRESHOLD:
            results.append({
                "matched_images_name": metadata[idx]["images_name"],
                "matched_images_id": metadata[idx]["images_id"],
                "images_preview_name": metadata[idx]["images_preview_name"],
                "similarity": round(float(score), 4)
            })

    return results
